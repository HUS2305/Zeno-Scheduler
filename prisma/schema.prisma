generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum TeamMemberRole {
  STANDARD
  ENHANCED
  ADMIN
  OWNER
}

enum TeamMemberStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INVITED
}

enum PermissionAction {
  // Calendar & Appointments
  VIEW_OWN_CALENDAR
  MANAGE_OWN_APPOINTMENTS
  VIEW_TEAM_CALENDARS
  MANAGE_TEAM_APPOINTMENTS
  VIEW_ALL_CALENDARS
  MANAGE_ALL_APPOINTMENTS
  
  // Customer Management
  VIEW_OWN_CUSTOMERS
  MANAGE_OWN_CUSTOMERS
  VIEW_ALL_CUSTOMERS
  MANAGE_ALL_CUSTOMERS
  
  // Team Management
  VIEW_TEAM_MEMBERS
  INVITE_TEAM_MEMBERS
  MANAGE_TEAM_MEMBERS
  REMOVE_TEAM_MEMBERS
  
  // Business Settings
  VIEW_BUSINESS_SETTINGS
  MANAGE_BUSINESS_SETTINGS
  MANAGE_SERVICES
  MANAGE_CATEGORIES
  MANAGE_OPENING_HOURS
  
  // Financial & Reports
  VIEW_REPORTS
  VIEW_FINANCIAL_DATA
  EXPORT_DATA
  
  // System Administration
  MANAGE_USER_ACCOUNTS
  VIEW_AUDIT_LOGS
  SYSTEM_CONFIGURATION
}

enum BookingStatus {
  CONFIRMED
  PENDING
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  HIDDEN
}

// ============================================================================
// AUTHENTICATION & BUSINESS OWNERSHIP
// ============================================================================

// User model for authentication only (business owners, team members with accounts)
model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  email           String     @unique // Must be unique for authentication
  name            String?
  hashedPassword  String?
  
  // Business ownership (one user can own one business)
  ownedBusiness  Business?  @relation("BusinessOwner")
  
  // Team memberships (if user is part of other businesses)
  teamMemberships TeamMember[]
  
  // Audit actions performed by this user
  auditActions   AuditLog[] @relation("AuditPerformer")
  
  // Invitations sent by this user
  sentInvitations TeamInvitation[] @relation("InvitationSender")
  
  // Timestamps
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  lastLoginAt     DateTime?
  
  // Email verification
  emailVerified   Boolean    @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  
  // Password reset
  passwordResetToken String?
  passwordResetExpires DateTime?
  
  // Account status
  isActive        Boolean    @default(true)
  isSuspended    Boolean    @default(false)
  
  @@map("users")
}

// ============================================================================
// BUSINESS & CUSTOMER ISOLATION
// ============================================================================

// Business model - each business is completely isolated
model Business {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String?    @unique // Public booking page slug (e.g., "the-crew")
  
  // Business profile
  profilePic   String?
  tagline      String?
  industry     String?
  about        String?
  
  // Contact information
  contactEmail String?
  contactPhone String?
  
  // Location information
  country      String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  
  // Appearance settings
  theme        String?    @default("light")
  brandColor   String?    @default("#000000")
  
  // Business preferences
  timeFormat   String?    @default("24") // "12" or "24"
  timezone     String?    @default("UTC")
  slotSize     Json?      // { value: number, unit: string }
  allowDoubleBooking Boolean @default(true)
  
  // Business status
  isActive     Boolean    @default(true)
  isPublic     Boolean    @default(true) // Can customers book publicly?
  
  // Relationships
  ownerId      String     @unique @db.ObjectId
  owner        User       @relation("BusinessOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Business-specific data (completely isolated)
  customers    Customer[]
  services     Service[]
  categories   Category[]
  teamMembers  TeamMember[]
  teamInvitations TeamInvitation[]
  openingHours OpeningHour[]
  reviews      Review[]
  auditLogs   AuditLog[]
  
  // Timestamps
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@map("businesses")
}

// Customer model - each customer belongs to ONE business only
model Customer {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  
  // Business relationship (REQUIRED - ensures isolation)
  businessId    String     @db.ObjectId
  business      Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Customer information
  name          String
  email         String?
  phone         String?
  company       String?
  
  // Address information
  country       String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  
  // Customer preferences
  notes         String?
  tags          String[]   // For customer segmentation
  
  // Customer status
  isActive      Boolean    @default(true)
  
  // Relationships
  bookings      Booking[]
  
  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Business-specific constraints
  @@unique([businessId, email]) // Email unique per business
  @@index([businessId, name])   // Index for efficient queries
  @@map("customers")
}

// ============================================================================
// SERVICES & CATEGORIES
// ============================================================================

// Service model - each service belongs to ONE business
model Service {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  
  // Business relationship (REQUIRED - ensures isolation)
  businessId    String        @db.ObjectId
  business      Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Service details
  name          String
  description   String?
  duration      Int           // Duration in minutes
  price         Int?          // Price in smallest currency unit (cents)
  currency      String?       @default("USD")
  
  // Service settings
  colorTheme    String?       @default("blue")
  isHidden      Boolean       @default(false)
  status        ServiceStatus @default(ACTIVE)
  
  // Booking settings
  maxBookingsPerSlot Int?     // Maximum bookings per time slot
  requiresConfirmation Boolean @default(false)
  
  // Relationships
  bookings      Booking[]
  teamLinks     ServiceTeamMember[]
  categoryLinks ServiceCategory[]
  
  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Business-specific constraints
  @@unique([businessId, name]) // Service name unique per business
  @@index([businessId, status]) // Index for efficient queries
  @@map("services")
}

// Category model - each category belongs to ONE business
model Category {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  
  // Business relationship (REQUIRED - ensures isolation)
  businessId    String    @db.ObjectId
  business      Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Category details
  name          String
  description   String?
  color         String?
  icon          String?
  
  // Relationships
  serviceLinks  ServiceCategory[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Business-specific constraints
  @@unique([businessId, name]) // Category name unique per business
  @@map("categories")
}

// Junction table for services and categories
model ServiceCategory {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  serviceId    String    @db.ObjectId
  categoryId   String    @db.ObjectId
  
  service      Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([serviceId, categoryId])
  @@map("service_categories")
}

// ============================================================================
// TEAM MANAGEMENT
// ============================================================================

// Team member model - each team member belongs to ONE business
model TeamMember {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  
  // Business relationship (REQUIRED - ensures isolation)
  businessId    String           @db.ObjectId
  business      Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Team member details
  name          String
  email         String           @unique // Email must be unique for invitations
  phone         String?
  profilePic    String?
  bio           String?
  
  // Role and status
  role          TeamMemberRole   @default(STANDARD)
  status        TeamMemberStatus @default(INVITED)
  
  // User account relationship (if team member has an account)
  userId        String?          @unique @db.ObjectId
  user          User?            @relation(fields: [userId], references: [id])
  
  // Permissions (many-to-many)
  permissions   TeamMemberPermission[]
  
  // Relationships
  bookings      Booking[]
  serviceLinks  ServiceTeamMember[]
  
  // Timestamps
  invitedAt     DateTime         @default(now())
  joinedAt      DateTime?
  lastActiveAt  DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Invitation tracking
  invitationToken String?        @unique
  invitationExpiresAt DateTime?
  
  // Business-specific constraints
  @@unique([businessId, email]) // Email unique per business
  @@map("team_members")
}

// Junction table for team member permissions
model TeamMemberPermission {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  teamMemberId  String           @db.ObjectId
  action        PermissionAction
  
  teamMember    TeamMember       @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  
  @@unique([teamMemberId, action])
  @@map("team_member_permissions")
}

// Junction table for services and team members
model ServiceTeamMember {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  serviceId    String      @db.ObjectId
  teamMemberId String      @db.ObjectId

  service      Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  teamMember   TeamMember  @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  
  @@unique([serviceId, teamMemberId])
  @@map("service_team_members")
}

// Team member invitations
model TeamInvitation {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  
  // Business relationship (REQUIRED - ensures isolation)
  businessId    String           @db.ObjectId
  business      Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Invitation details
  email         String
  name          String
  role          TeamMemberRole
  token         String           @unique
  expiresAt     DateTime
  acceptedAt    DateTime?
  acceptedBy    String?          @db.ObjectId
  
  // Metadata
  invitedBy     String           @db.ObjectId
  invitedByUser User             @relation("InvitationSender", fields: [invitedBy], references: [id])
  message       String?
  
  // Timestamps
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@map("team_invitations")
}

// ============================================================================
// BOOKINGS & APPOINTMENTS
// ============================================================================

// Booking model - each booking is tied to a specific business through service
model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  
  // Business relationship (through service - ensures isolation)
  serviceId     String        @db.ObjectId
  service       Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  // Customer relationship (business-specific customer)
  customerId    String        @db.ObjectId
  customer      Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Team member (optional)
  teamMemberId  String?       @db.ObjectId
  teamMember    TeamMember?   @relation(fields: [teamMemberId], references: [id])
  
  // Booking details
  date          DateTime
  startTime     DateTime      // Calculated from date + service duration
  endTime       DateTime      // Calculated from date + service duration
  status        BookingStatus @default(CONFIRMED)
  
  // Customer notes
  customerNote  String?
  internalNote  String?
  
  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Business-specific constraints
  @@index([serviceId, date]) // Index for efficient date queries
  @@index([customerId, date]) // Index for customer booking history
  @@map("bookings")
}

// ============================================================================
// BUSINESS OPERATIONS
// ============================================================================

// Opening hours - each business has its own schedule
model OpeningHour {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  
  // Business relationship (REQUIRED - ensures isolation)
  businessId String    @db.ObjectId
  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Schedule details
  dayOfWeek  Int       // 0 = Sunday, 1 = Monday, etc.
  openTime   String    // Format: "08:00"
  closeTime  String    // Format: "17:00"
  isClosed   Boolean   @default(false)
  
  // Break times (optional)
  breaks     Json?     // Array of break periods
  
  @@unique([businessId, dayOfWeek])
  @@map("opening_hours")
}

// Reviews - each review belongs to a specific business
model Review {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  
  // Business relationship (REQUIRED - ensures isolation)
  businessId String    @db.ObjectId
  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Review details
  rating     Int       // 1-5 stars
  comment    String?
  customerName String?
  customerEmail String?
  
  // Review status
  isApproved Boolean   @default(false)
  isPublic   Boolean   @default(true)
  
  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@map("reviews")
}

// ============================================================================
// AUDIT & SECURITY
// ============================================================================

// Audit logging for security and compliance
model AuditLog {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  
  // Business relationship (REQUIRED - ensures isolation)
  businessId    String     @db.ObjectId
  business      Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Action details
  action        String     // What was done
  resourceType  String     // Type of resource affected
  resourceId    String?    // ID of affected resource
  oldValues     Json?      // Previous values
  newValues     Json?      // New values
  
  // User context
  performedBy   String     @db.ObjectId
  performedByUser User     @relation("AuditPerformer", fields: [performedBy], references: [id])
  
  // Metadata
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime   @default(now())
  description   String?
  metadata      Json?
  
  @@index([businessId, timestamp]) // Index for efficient audit queries
  @@map("audit_logs")
}
